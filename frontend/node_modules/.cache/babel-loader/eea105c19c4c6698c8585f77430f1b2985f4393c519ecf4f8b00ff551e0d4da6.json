{"ast":null,"code":"var _jsxFileName = \"/home/nick/dev/TAS_Meeting_System/frontend/src/components/MainLayout.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport SideBar from './sidebar/SideBar';\nimport DesignContainer from './design_pane/DesignContainer';\nimport { Stack } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainLayout = () => {\n  _s();\n  const [color, setColor] = useState('white');\n  const handleColorChange = () => {\n    setColor(color === 'white' ? 'gray' : 'white');\n  };\n  const [slideData, setSlideData] = useState([]); // checking to pass to slide window if all data is in an array\n\n  const handleSlideClick = async (deck, slide) => {\n    console.log('Double clicked slide: ', slide);\n    try {\n      /*\n      let baseSlidePath = '/api/select-slide?deck=${deck}&slide=${slide}';\n      let tempPath = baseSlidePath.concat(deck);\n      tempPath = tempPath + '/';\n      let fullSlidePath = tempPath.concat(slide);\n      */\n      const response = await fetch('/api/select-slide?deck=${deck}&slide=${slide}');\n      if (!response.ok) {\n        throw new Error('Failed to get slide info');\n      }\n      const data = await response.json();\n      setSlideData(data);\n      console.log('data received');\n    } catch (error) {\n      console.error('Error fetching slide info: ', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Stack, {\n    spacing: 4,\n    direction: \"row\",\n    style: {\n      alignItems: 'center',\n      marginTop: '8px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(SideBar, {\n      onClick: handleColorChange,\n      onSlideOpen: (deck, slide) => handleSlideClick(deck, slide)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(DesignContainer, {\n      color: color\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n_s(MainLayout, \"X/cwJc3jfQwiscbdUPxAdhqgR9Q=\");\n_c = MainLayout;\nexport default MainLayout;\nvar _c;\n$RefreshReg$(_c, \"MainLayout\");","map":{"version":3,"names":["React","useState","SideBar","DesignContainer","Stack","jsxDEV","_jsxDEV","MainLayout","_s","color","setColor","handleColorChange","slideData","setSlideData","handleSlideClick","deck","slide","console","log","response","fetch","ok","Error","data","json","error","spacing","direction","style","alignItems","marginTop","children","onClick","onSlideOpen","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/nick/dev/TAS_Meeting_System/frontend/src/components/MainLayout.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport SideBar from './sidebar/SideBar';\nimport DesignContainer from './design_pane/DesignContainer';\nimport { Stack } from \"@mui/material\";\n\nconst MainLayout = () => {\n    const [color, setColor] = useState('white');\n\n    const handleColorChange = () => {\n        setColor(color === 'white' ? 'gray' : 'white');\n    };\n\n    const [slideData, setSlideData] = useState([]); // checking to pass to slide window if all data is in an array\n\n    const handleSlideClick = async (deck, slide) => {\n      console.log('Double clicked slide: ', slide);\n      try {\n        /*\n        let baseSlidePath = '/api/select-slide?deck=${deck}&slide=${slide}';\n        let tempPath = baseSlidePath.concat(deck);\n        tempPath = tempPath + '/';\n        let fullSlidePath = tempPath.concat(slide);\n        */\n        const response = await fetch('/api/select-slide?deck=${deck}&slide=${slide}');\n        if (!response.ok) {\n          throw new Error('Failed to get slide info');\n        }\n        const data = await response.json();\n        setSlideData(data);\n        console.log('data received');\n      } catch (error) {\n        console.error('Error fetching slide info: ', error);\n      }\n    };\n\n\n    return (\n        <Stack spacing={4} direction=\"row\" style={{alignItems: 'center', marginTop: '8px' }}>\n          <SideBar onClick={handleColorChange} onSlideOpen={(deck, slide) => handleSlideClick(deck, slide)}/>\n          <DesignContainer color={color} />\n        </Stack>\n    );\n};\n\nexport default MainLayout;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,OAAO,MAAM,mBAAmB;AACvC,OAAOC,eAAe,MAAM,+BAA+B;AAC3D,SAASC,KAAK,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,OAAO,CAAC;EAE3C,MAAMU,iBAAiB,GAAGA,CAAA,KAAM;IAC5BD,QAAQ,CAACD,KAAK,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC;EAClD,CAAC;EAED,MAAM,CAACG,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEhD,MAAMa,gBAAgB,GAAG,MAAAA,CAAOC,IAAI,EAAEC,KAAK,KAAK;IAC9CC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEF,KAAK,CAAC;IAC5C,IAAI;MACF;AACR;AACA;AACA;AACA;AACA;MACQ,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,+CAA+C,CAAC;MAC7E,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;MAC7C;MACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClCX,YAAY,CAACU,IAAI,CAAC;MAClBN,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;IAC9B,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF,CAAC;EAGD,oBACInB,OAAA,CAACF,KAAK;IAACsB,OAAO,EAAE,CAAE;IAACC,SAAS,EAAC,KAAK;IAACC,KAAK,EAAE;MAACC,UAAU,EAAE,QAAQ;MAAEC,SAAS,EAAE;IAAM,CAAE;IAAAC,QAAA,gBAClFzB,OAAA,CAACJ,OAAO;MAAC8B,OAAO,EAAErB,iBAAkB;MAACsB,WAAW,EAAEA,CAAClB,IAAI,EAAEC,KAAK,KAAKF,gBAAgB,CAACC,IAAI,EAAEC,KAAK;IAAE;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACnG/B,OAAA,CAACH,eAAe;MAACM,KAAK,EAAEA;IAAM;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5B,CAAC;AAEhB,CAAC;AAAC7B,EAAA,CArCID,UAAU;AAAA+B,EAAA,GAAV/B,UAAU;AAuChB,eAAeA,UAAU;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}