{"ast":null,"code":"var _jsxFileName = \"/home/nick/dev/TAS_Meeting_System/frontend/src/components/MainLayout.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport SideBar from './sidebar/SideBar';\nimport DesignContainer from './design_pane/DesignContainer';\nimport { Stack } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainLayout = () => {\n  _s();\n  const [color, setColor] = useState('white');\n  const handleColorChange = () => {\n    setColor(color === 'white' ? 'gray' : 'white');\n  };\n  const [slideData, setSlideData] = useState([]); // checking to pass to slide window if all data is in an array\n  const [deckName, setDeckName] = useState([]);\n  const handleSlideClick = async (deck, slide) => {\n    setDeckName(deck);\n    console.log('Double clicked slide: ', slide);\n    try {\n      let baseSlidePath = '/api/select-slide/';\n      let tempPath = baseSlidePath.concat(deck);\n      let temp2 = tempPath.concat('/');\n      let fullSlidePath = temp2.concat(slide);\n      console.log(fullSlidePath);\n      const response = await fetch(fullSlidePath);\n      if (!response.ok) {\n        throw new Error('Failed to get slide info');\n      }\n      const data = await response.json();\n      setSlideData(data);\n      console.log('data received');\n    } catch (error) {\n      console.error('Error fetching slide info: ', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Stack, {\n    spacing: 4,\n    direction: \"row\",\n    style: {\n      alignItems: 'center',\n      marginTop: '8px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(SideBar, {\n      onClick: handleColorChange,\n      onSlideOpen: (deck, slide) => handleSlideClick(deck, slide)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(DesignContainer, {\n      color: color,\n      slideData: slideData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n_s(MainLayout, \"5vVcaVoT9Dr0F8XdV9J0mLK4aOY=\");\n_c = MainLayout;\nexport default MainLayout;\nvar _c;\n$RefreshReg$(_c, \"MainLayout\");","map":{"version":3,"names":["React","useState","SideBar","DesignContainer","Stack","jsxDEV","_jsxDEV","MainLayout","_s","color","setColor","handleColorChange","slideData","setSlideData","deckName","setDeckName","handleSlideClick","deck","slide","console","log","baseSlidePath","tempPath","concat","temp2","fullSlidePath","response","fetch","ok","Error","data","json","error","spacing","direction","style","alignItems","marginTop","children","onClick","onSlideOpen","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/nick/dev/TAS_Meeting_System/frontend/src/components/MainLayout.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport SideBar from './sidebar/SideBar';\nimport DesignContainer from './design_pane/DesignContainer';\nimport { Stack } from \"@mui/material\";\n\nconst MainLayout = () => {\n    const [color, setColor] = useState('white');\n\n    const handleColorChange = () => {\n        setColor(color === 'white' ? 'gray' : 'white');\n    };\n\n    const [slideData, setSlideData] = useState([]); // checking to pass to slide window if all data is in an array\n    const [deckName, setDeckName] = useState([]);\n\n    const handleSlideClick = async (deck, slide) => {\n        setDeckName(deck);\n        console.log('Double clicked slide: ', slide);\n        try {\n            let baseSlidePath = '/api/select-slide/';\n            let tempPath = baseSlidePath.concat(deck);\n            let temp2 = tempPath.concat('/');\n            let fullSlidePath = temp2.concat(slide);\n            console.log(fullSlidePath);\n            const response = await fetch(fullSlidePath);\n            if (!response.ok) {\n            throw new Error('Failed to get slide info');\n            }\n            const data = await response.json();\n            setSlideData(data);\n            console.log('data received');\n        } catch (error) {\n            console.error('Error fetching slide info: ', error);\n        }\n    };\n\n\n    return (\n        <Stack spacing={4} direction=\"row\" style={{alignItems: 'center', marginTop: '8px' }}>\n          <SideBar onClick={handleColorChange} onSlideOpen={(deck, slide) => handleSlideClick(deck, slide)}/>\n          <DesignContainer color={color} slideData={slideData} />\n        </Stack>\n    );\n};\n\nexport default MainLayout;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,OAAO,MAAM,mBAAmB;AACvC,OAAOC,eAAe,MAAM,+BAA+B;AAC3D,SAASC,KAAK,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,OAAO,CAAC;EAE3C,MAAMU,iBAAiB,GAAGA,CAAA,KAAM;IAC5BD,QAAQ,CAACD,KAAK,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC;EAClD,CAAC;EAED,MAAM,CAACG,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAChD,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMe,gBAAgB,GAAG,MAAAA,CAAOC,IAAI,EAAEC,KAAK,KAAK;IAC5CH,WAAW,CAACE,IAAI,CAAC;IACjBE,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEF,KAAK,CAAC;IAC5C,IAAI;MACA,IAAIG,aAAa,GAAG,oBAAoB;MACxC,IAAIC,QAAQ,GAAGD,aAAa,CAACE,MAAM,CAACN,IAAI,CAAC;MACzC,IAAIO,KAAK,GAAGF,QAAQ,CAACC,MAAM,CAAC,GAAG,CAAC;MAChC,IAAIE,aAAa,GAAGD,KAAK,CAACD,MAAM,CAACL,KAAK,CAAC;MACvCC,OAAO,CAACC,GAAG,CAACK,aAAa,CAAC;MAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,aAAa,CAAC;MAC3C,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;QAClB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;MAC3C;MACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClClB,YAAY,CAACiB,IAAI,CAAC;MAClBX,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;IAChC,CAAC,CAAC,OAAOY,KAAK,EAAE;MACZb,OAAO,CAACa,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACvD;EACJ,CAAC;EAGD,oBACI1B,OAAA,CAACF,KAAK;IAAC6B,OAAO,EAAE,CAAE;IAACC,SAAS,EAAC,KAAK;IAACC,KAAK,EAAE;MAACC,UAAU,EAAE,QAAQ;MAAEC,SAAS,EAAE;IAAM,CAAE;IAAAC,QAAA,gBAClFhC,OAAA,CAACJ,OAAO;MAACqC,OAAO,EAAE5B,iBAAkB;MAAC6B,WAAW,EAAEA,CAACvB,IAAI,EAAEC,KAAK,KAAKF,gBAAgB,CAACC,IAAI,EAAEC,KAAK;IAAE;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACnGtC,OAAA,CAACH,eAAe;MAACM,KAAK,EAAEA,KAAM;MAACG,SAAS,EAAEA;IAAU;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClD,CAAC;AAEhB,CAAC;AAACpC,EAAA,CAtCID,UAAU;AAAAsC,EAAA,GAAVtC,UAAU;AAwChB,eAAeA,UAAU;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}