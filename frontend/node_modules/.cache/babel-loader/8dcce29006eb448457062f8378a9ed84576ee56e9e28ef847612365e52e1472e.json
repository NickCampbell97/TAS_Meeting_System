{"ast":null,"code":"var _jsxFileName = \"/home/nick/dev/TAS_Meeting_System/frontend/src/components/design_pane/DesignContainer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport SlideWindow from './SlideWindow';\nimport Stack from '@mui/material/Stack';\nimport SaveButton from './button_options/SaveButton';\nimport { Box } from '@mui/material';\nimport InsertSelection from './button_options/InsertSelection';\nimport InsertButton from './button_options/InsertButton';\nimport DuplicateButton from './button_options/DuplicateButton';\nimport DeleteButton from './button_options/DeleteButton';\nimport FileUpload from './FileUpload';\nimport '@fontsource/roboto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DesignContainer = ({\n  color,\n  slideData,\n  deckName\n}) => {\n  _s();\n  const handleSave = () => {};\n  const [dialogVisible, setDialogVisible] = useState(false);\n  const slideName = slideData.slide_name;\n  const handleInsert = async (selectedValue, name, slideID) => {\n    if (selectedValue === 'option2') {\n      setDialogVisible = true;\n    }\n  };\n  const handleDuplicate = (deck, slide) => {};\n  const handleDelete = (deck, slide) => {};\n  const [selectedInsertValue, setSelectedInsertValue] = useState('option1');\n  const handleChange = event => {\n    setSelectedInsertValue(event.target.value);\n  };\n  const insertOptions = [{\n    value: 'option1',\n    label: 'Body'\n  }, {\n    value: 'option2',\n    label: 'Document'\n  }, {\n    value: 'option3',\n    label: 'Header'\n  }, {\n    value: 'option4',\n    label: 'Image'\n  }, {\n    value: 'option5',\n    label: 'Comment'\n  }];\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      flexGrow: 1,\n      overflow: 'hidden',\n      px: 3,\n      backgroundColor: 'lightgray',\n      height: '570px',\n      width: '850px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Stack, {\n      spacing: 4,\n      direction: \"row\",\n      style: {\n        alignItems: 'center',\n        backgroundColor: 'lightgray',\n        width: '840px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 1,\n        direction: \"row\",\n        style: {\n          alignItems: 'center',\n          backgroundColor: 'white',\n          width: '500px',\n          marginTop: '8px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(SaveButton, {\n          onSave: handleSave\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(InsertSelection, {\n          value: selectedInsertValue,\n          onChange: handleChange,\n          options: insertOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(InsertButton, {\n          onClick: () => handleInsert(selectedInsertValue, deckName, slideName)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DuplicateButton, {\n          onClick: () => handleDuplicate(deckName, slideData)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DeleteButton, {\n          onClick: () => handleDelete(deckName, slideData)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            textAlign: 'right',\n            marginLeft: '150px',\n            fontSize: '14px',\n            font: 'roboto'\n          },\n          children: deckName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), dialogVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(FileUpload, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 40\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 35\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SlideWindow, {\n      color: color,\n      slideData: slideData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n_s(DesignContainer, \"Vp+Nnf7mgV0ogCoM/1qz2sw5fNk=\");\n_c = DesignContainer;\nexport default DesignContainer;\nvar _c;\n$RefreshReg$(_c, \"DesignContainer\");","map":{"version":3,"names":["React","useState","SlideWindow","Stack","SaveButton","Box","InsertSelection","InsertButton","DuplicateButton","DeleteButton","FileUpload","jsxDEV","_jsxDEV","DesignContainer","color","slideData","deckName","_s","handleSave","dialogVisible","setDialogVisible","slideName","slide_name","handleInsert","selectedValue","name","slideID","handleDuplicate","deck","slide","handleDelete","selectedInsertValue","setSelectedInsertValue","handleChange","event","target","value","insertOptions","label","sx","flexGrow","overflow","px","backgroundColor","height","width","children","spacing","direction","style","alignItems","marginTop","onSave","fileName","_jsxFileName","lineNumber","columnNumber","onChange","options","onClick","textAlign","marginLeft","fontSize","font","_c","$RefreshReg$"],"sources":["/home/nick/dev/TAS_Meeting_System/frontend/src/components/design_pane/DesignContainer.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport SlideWindow from './SlideWindow';\nimport Stack from '@mui/material/Stack';\nimport SaveButton from './button_options/SaveButton';\nimport { Box } from '@mui/material';\nimport InsertSelection from './button_options/InsertSelection';\nimport InsertButton from './button_options/InsertButton';\nimport DuplicateButton from './button_options/DuplicateButton';\nimport DeleteButton from './button_options/DeleteButton';\nimport FileUpload from './FileUpload';\nimport '@fontsource/roboto';\n\nconst DesignContainer = ({ color, slideData, deckName }) => {\n\n    const handleSave = () => {\n\n    };\n    \n    const [dialogVisible, setDialogVisible] = useState(false);\n\n    const slideName = slideData.slide_name;\n\n    const handleInsert = async (selectedValue, name, slideID) => {\n\n        if (selectedValue === 'option2') {\n            setDialogVisible = true;\n        }\n\n    };\n\n    const handleDuplicate = (deck, slide) => {\n\n    };\n\n    const handleDelete = (deck, slide) => {\n\n    };\n\n    const [selectedInsertValue, setSelectedInsertValue] = useState('option1');\n\n    const handleChange = (event) => {\n        setSelectedInsertValue(event.target.value);\n    };\n\n\n    const insertOptions = [\n        { value: 'option1', label: 'Body' },\n        { value: 'option2', label: 'Document' },\n        { value: 'option3', label: 'Header' },\n        { value: 'option4', label: 'Image' },\n        { value: 'option5', label: 'Comment' }\n    ];\n    \n    return (\n        <Box sx={{ flexGrow: 1, overflow: 'hidden', px: 3, backgroundColor: 'lightgray', height: '570px', width: '850px' }}>\n            <Stack spacing={4} direction='row' style={{ alignItems: 'center', backgroundColor: 'lightgray', width: '840px' }}>\n                <Stack spacing={1} direction=\"row\" style={{alignItems: 'center', backgroundColor: 'white', width: '500px', marginTop: '8px'}}>\n                    <SaveButton onSave={handleSave} />\n                    <InsertSelection\n                        value={selectedInsertValue}\n                        onChange={handleChange}\n                        options={insertOptions}\n                    />\n                    <InsertButton onClick={() => handleInsert(selectedInsertValue, deckName, slideName)} />\n                    <DuplicateButton onClick={() => handleDuplicate(deckName, slideData)} />\n                    <DeleteButton onClick={() => handleDelete(deckName, slideData)} />\n                    <p style={{ textAlign: 'right', marginLeft: '150px', fontSize: '14px', font: 'roboto' }}>{deckName}</p>\n                </Stack>\n                {dialogVisible && <div><FileUpload /></div>}\n            </Stack>\n            <SlideWindow color={color} slideData={slideData} />\n        </Box>\n        \n        \n    );\n\n};\n\nexport default DesignContainer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}